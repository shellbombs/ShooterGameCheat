#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShooterGame

#include "Basic.hpp"

#include "ShooterGame_classes.hpp"
#include "ShooterGame_parameters.hpp"


namespace SDK
{

// Function ShooterGame.ShooterCharacter.OnRep_CurrentWeapon
// (Final, Native, Protected)
// Parameters:
// class AShooterWeapon*                   LastWeapon                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterCharacter::OnRep_CurrentWeapon(class AShooterWeapon* LastWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "OnRep_CurrentWeapon");

	Params::ShooterCharacter_OnRep_CurrentWeapon Parms{};

	Parms.LastWeapon = LastWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCharacter.OnRep_LastTakeHitInfo
// (Final, Native, Protected)

void AShooterCharacter::OnRep_LastTakeHitInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "OnRep_LastTakeHitInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCharacter.ServerEquipWeapon
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class AShooterWeapon*                   NewWeapon                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterCharacter::ServerEquipWeapon(class AShooterWeapon* NewWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "ServerEquipWeapon");

	Params::ShooterCharacter_ServerEquipWeapon Parms{};

	Parms.NewWeapon = NewWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCharacter.ServerSetRunning
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bNewRunning                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bToggle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterCharacter::ServerSetRunning(bool bNewRunning, bool bToggle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "ServerSetRunning");

	Params::ShooterCharacter_ServerSetRunning Parms{};

	Parms.bNewRunning = bNewRunning;
	Parms.bToggle = bToggle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCharacter.ServerSetTargeting
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bNewTargeting                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterCharacter::ServerSetTargeting(bool bNewTargeting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "ServerSetTargeting");

	Params::ShooterCharacter_ServerSetTargeting Parms{};

	Parms.bNewTargeting = bNewTargeting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCharacter.GetAimOffsets
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AShooterCharacter::GetAimOffsets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "GetAimOffsets");

	Params::ShooterCharacter_GetAimOffsets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetRunningSpeedModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AShooterCharacter::GetRunningSpeedModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "GetRunningSpeedModifier");

	Params::ShooterCharacter_GetRunningSpeedModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetTargetingSpeedModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AShooterCharacter::GetTargetingSpeedModifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "GetTargetingSpeedModifier");

	Params::ShooterCharacter_GetTargetingSpeedModifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AShooterWeapon*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AShooterWeapon* AShooterCharacter::GetWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "GetWeapon");

	Params::ShooterCharacter_GetWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsFiring
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AShooterCharacter::IsFiring() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "IsFiring");

	Params::ShooterCharacter_IsFiring Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsFirstPerson
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AShooterCharacter::IsFirstPerson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "IsFirstPerson");

	Params::ShooterCharacter_IsFirstPerson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AShooterCharacter::IsRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "IsRunning");

	Params::ShooterCharacter_IsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsTargeting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AShooterCharacter::IsTargeting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCharacter", "IsTargeting");

	Params::ShooterCharacter_IsTargeting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.ClientStartReload
// (Net, NetReliable, Native, Event, Public, NetClient)

void AShooterWeapon::ClientStartReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "ClientStartReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.OnRep_BurstCounter
// (Final, Native, Protected)

void AShooterWeapon::OnRep_BurstCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "OnRep_BurstCounter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.OnRep_MyPawn
// (Final, Native, Protected)

void AShooterWeapon::OnRep_MyPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "OnRep_MyPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.OnRep_Reload
// (Final, Native, Protected)

void AShooterWeapon::OnRep_Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "OnRep_Reload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.ServerHandleFiring
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AShooterWeapon::ServerHandleFiring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "ServerHandleFiring");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.ServerStartFire
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AShooterWeapon::ServerStartFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "ServerStartFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.ServerStartReload
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AShooterWeapon::ServerStartReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "ServerStartReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.ServerStopFire
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AShooterWeapon::ServerStopFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "ServerStopFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.ServerStopReload
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void AShooterWeapon::ServerStopReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "ServerStopReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon.GetPawnOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AShooterCharacter*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AShooterCharacter* AShooterWeapon::GetPawnOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon", "GetPawnOwner");

	Params::ShooterWeapon_GetPawnOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Instant.OnRep_HitNotify
// (Final, Native, Protected)

void AShooterWeapon_Instant::OnRep_HitNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon_Instant", "OnRep_HitNotify");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon_Instant.ServerNotifyHit
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FHitResult                       Impact                                                 (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal        ShootDir                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RandomSeed                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReticleSpread                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterWeapon_Instant::ServerNotifyHit(const struct FHitResult& Impact, const struct FVector_NetQuantizeNormal& ShootDir, int32 RandomSeed, float ReticleSpread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon_Instant", "ServerNotifyHit");

	Params::ShooterWeapon_Instant_ServerNotifyHit Parms{};

	Parms.Impact = std::move(Impact);
	Parms.ShootDir = std::move(ShootDir);
	Parms.RandomSeed = RandomSeed;
	Parms.ReticleSpread = ReticleSpread;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon_Instant.ServerNotifyMiss
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FVector_NetQuantizeNormal        ShootDir                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RandomSeed                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReticleSpread                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterWeapon_Instant::ServerNotifyMiss(const struct FVector_NetQuantizeNormal& ShootDir, int32 RandomSeed, float ReticleSpread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon_Instant", "ServerNotifyMiss");

	Params::ShooterWeapon_Instant_ServerNotifyMiss Parms{};

	Parms.ShootDir = std::move(ShootDir);
	Parms.RandomSeed = RandomSeed;
	Parms.ReticleSpread = ReticleSpread;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterAIController.FindClosestEnemy
// (Final, Native, Public, BlueprintCallable)

void AShooterAIController::FindClosestEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterAIController", "FindClosestEnemy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterAIController.FindClosestEnemyWithLOS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AShooterCharacter*                ExcludeEnemy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AShooterAIController::FindClosestEnemyWithLOS(class AShooterCharacter* ExcludeEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterAIController", "FindClosestEnemyWithLOS");

	Params::ShooterAIController_FindClosestEnemyWithLOS Parms{};

	Parms.ExcludeEnemy = ExcludeEnemy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ShooterGame.ShooterAIController.ShootEnemy
// (Final, Native, Public, BlueprintCallable)

void AShooterAIController::ShootEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterAIController", "ShootEnemy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.ClientEndOnlineGame
// (Net, NetReliable, Native, Event, Public, NetClient)

void AShooterPlayerController::ClientEndOnlineGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "ClientEndOnlineGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.ClientGameStarted
// (Net, NetReliable, Native, Event, Public, NetClient)

void AShooterPlayerController::ClientGameStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "ClientGameStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.ClientSendRoundEndEvent
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bIsWinner                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ExpendedTimeInSeconds                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerController::ClientSendRoundEndEvent(bool bIsWinner, int32 ExpendedTimeInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "ClientSendRoundEndEvent");

	Params::ShooterPlayerController_ClientSendRoundEndEvent Parms{};

	Parms.bIsWinner = bIsWinner;
	Parms.ExpendedTimeInSeconds = ExpendedTimeInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.ClientSetSpectatorCamera
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CameraRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AShooterPlayerController::ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "ClientSetSpectatorCamera");

	Params::ShooterPlayerController_ClientSetSpectatorCamera Parms{};

	Parms.CameraLocation = std::move(CameraLocation);
	Parms.CameraRotation = std::move(CameraRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.ClientStartOnlineGame
// (Net, NetReliable, Native, Event, Public, NetClient)

void AShooterPlayerController::ClientStartOnlineGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "ClientStartOnlineGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.OnLeaderboardReadComplete
// (Final, Native, Public)
// Parameters:
// bool                                    bWasSuccessful                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerController::OnLeaderboardReadComplete(bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "OnLeaderboardReadComplete");

	Params::ShooterPlayerController_OnLeaderboardReadComplete Parms{};

	Parms.bWasSuccessful = bWasSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.Say
// (Exec, Native, Public)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerController::Say(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "Say");

	Params::ShooterPlayerController_Say Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.ServerCheat
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerController::ServerCheat(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "ServerCheat");

	Params::ShooterPlayerController_ServerCheat Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.ServerSay
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerController::ServerSay(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "ServerSay");

	Params::ShooterPlayerController_ServerSay Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.ServerSuicide
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void AShooterPlayerController::ServerSuicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "ServerSuicide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.SetGodMode
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerController::SetGodMode(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "SetGodMode");

	Params::ShooterPlayerController_SetGodMode Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.SimulateInputKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerController::SimulateInputKey(const struct FKey& Key, bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "SimulateInputKey");

	Params::ShooterPlayerController_SimulateInputKey Parms{};

	Parms.Key = std::move(Key);
	Parms.bPressed = bPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerController.Suicide
// (Exec, Native, Public)

void AShooterPlayerController::Suicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerController", "Suicide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCheatManager.ChangeTeam
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   NewTeamNumber                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShooterCheatManager::ChangeTeam(int32 NewTeamNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCheatManager", "ChangeTeam");

	Params::ShooterCheatManager_ChangeTeam Parms{};

	Parms.NewTeamNumber = NewTeamNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCheatManager.Cheat
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShooterCheatManager::Cheat(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCheatManager", "Cheat");

	Params::ShooterCheatManager_Cheat Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCheatManager.ForceMatchStart
// (Final, Exec, Native, Public)

void UShooterCheatManager::ForceMatchStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCheatManager", "ForceMatchStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCheatManager.SpawnBot
// (Final, Exec, Native, Public)

void UShooterCheatManager::SpawnBot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCheatManager", "SpawnBot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCheatManager.ToggleInfiniteAmmo
// (Final, Exec, Native, Public)

void UShooterCheatManager::ToggleInfiniteAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCheatManager", "ToggleInfiniteAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCheatManager.ToggleInfiniteClip
// (Final, Exec, Native, Public)

void UShooterCheatManager::ToggleInfiniteClip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCheatManager", "ToggleInfiniteClip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterCheatManager.ToggleMatchTimer
// (Final, Exec, Native, Public)

void UShooterCheatManager::ToggleMatchTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterCheatManager", "ToggleMatchTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterGameMode.FinishMatch
// (Final, Exec, Native, Public)

void AShooterGameMode::FinishMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterGameMode", "FinishMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterGameMode.SetAllowBots
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bInAllowBots                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMaxBots                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterGameMode::SetAllowBots(bool bInAllowBots, int32 InMaxBots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterGameMode", "SetAllowBots");

	Params::ShooterGameMode_SetAllowBots Parms{};

	Parms.bInAllowBots = bInAllowBots;
	Parms.InMaxBots = InMaxBots;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPickup.OnPickedUpEvent
// (Event, Protected, BlueprintEvent)

void AShooterPickup::OnPickedUpEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPickup", "OnPickedUpEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShooterGame.ShooterPickup.OnRep_IsActive
// (Final, Native, Protected)

void AShooterPickup::OnRep_IsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPickup", "OnRep_IsActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPickup.OnRespawnEvent
// (Event, Protected, BlueprintEvent)

void AShooterPickup::OnRespawnEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPickup", "OnRespawnEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ShooterGame.ShooterPlayerState.BroadcastDeath
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class AShooterPlayerState*              KillerPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      KillerDamageType                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AShooterPlayerState*              KilledPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerState::BroadcastDeath(class AShooterPlayerState* KillerPlayerState, const class UDamageType* KillerDamageType, class AShooterPlayerState* KilledPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerState", "BroadcastDeath");

	Params::ShooterPlayerState_BroadcastDeath Parms{};

	Parms.KillerPlayerState = KillerPlayerState;
	Parms.KillerDamageType = KillerDamageType;
	Parms.KilledPlayerState = KilledPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerState.InformAboutKill
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class AShooterPlayerState*              KillerPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      KillerDamageType                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AShooterPlayerState*              KilledPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterPlayerState::InformAboutKill(class AShooterPlayerState* KillerPlayerState, const class UDamageType* KillerDamageType, class AShooterPlayerState* KilledPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerState", "InformAboutKill");

	Params::ShooterPlayerState_InformAboutKill Parms{};

	Parms.KillerPlayerState = KillerPlayerState;
	Parms.KillerDamageType = KillerDamageType;
	Parms.KilledPlayerState = KilledPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterPlayerState.OnRep_TeamColor
// (Final, Native, Public)

void AShooterPlayerState::OnRep_TeamColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterPlayerState", "OnRep_TeamColor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterProjectile.OnImpact
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AShooterProjectile::OnImpact(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterProjectile", "OnImpact");

	Params::ShooterProjectile_OnImpact Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterProjectile.OnRep_Exploded
// (Final, Native, Protected)

void AShooterProjectile::OnRep_Exploded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterProjectile", "OnRep_Exploded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ShooterGame.ShooterWeapon_Projectile.ServerFireProjectile
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          Origin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal        ShootDir                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AShooterWeapon_Projectile::ServerFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShooterWeapon_Projectile", "ServerFireProjectile");

	Params::ShooterWeapon_Projectile_ServerFireProjectile Parms{};

	Parms.Origin = std::move(Origin);
	Parms.ShootDir = std::move(ShootDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

