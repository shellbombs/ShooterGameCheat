#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShooterGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ShooterGame.ShooterCharacter.OnRep_CurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct ShooterCharacter_OnRep_CurrentWeapon final
{
public:
	class AShooterWeapon*                         LastWeapon;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_OnRep_CurrentWeapon) == 0x000008, "Wrong alignment on ShooterCharacter_OnRep_CurrentWeapon");
static_assert(sizeof(ShooterCharacter_OnRep_CurrentWeapon) == 0x000008, "Wrong size on ShooterCharacter_OnRep_CurrentWeapon");
static_assert(offsetof(ShooterCharacter_OnRep_CurrentWeapon, LastWeapon) == 0x000000, "Member 'ShooterCharacter_OnRep_CurrentWeapon::LastWeapon' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.ServerEquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct ShooterCharacter_ServerEquipWeapon final
{
public:
	class AShooterWeapon*                         NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_ServerEquipWeapon) == 0x000008, "Wrong alignment on ShooterCharacter_ServerEquipWeapon");
static_assert(sizeof(ShooterCharacter_ServerEquipWeapon) == 0x000008, "Wrong size on ShooterCharacter_ServerEquipWeapon");
static_assert(offsetof(ShooterCharacter_ServerEquipWeapon, NewWeapon) == 0x000000, "Member 'ShooterCharacter_ServerEquipWeapon::NewWeapon' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.ServerSetRunning
// 0x0002 (0x0002 - 0x0000)
struct ShooterCharacter_ServerSetRunning final
{
public:
	bool                                          bNewRunning;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggle;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_ServerSetRunning) == 0x000001, "Wrong alignment on ShooterCharacter_ServerSetRunning");
static_assert(sizeof(ShooterCharacter_ServerSetRunning) == 0x000002, "Wrong size on ShooterCharacter_ServerSetRunning");
static_assert(offsetof(ShooterCharacter_ServerSetRunning, bNewRunning) == 0x000000, "Member 'ShooterCharacter_ServerSetRunning::bNewRunning' has a wrong offset!");
static_assert(offsetof(ShooterCharacter_ServerSetRunning, bToggle) == 0x000001, "Member 'ShooterCharacter_ServerSetRunning::bToggle' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.ServerSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct ShooterCharacter_ServerSetTargeting final
{
public:
	bool                                          bNewTargeting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_ServerSetTargeting) == 0x000001, "Wrong alignment on ShooterCharacter_ServerSetTargeting");
static_assert(sizeof(ShooterCharacter_ServerSetTargeting) == 0x000001, "Wrong size on ShooterCharacter_ServerSetTargeting");
static_assert(offsetof(ShooterCharacter_ServerSetTargeting, bNewTargeting) == 0x000000, "Member 'ShooterCharacter_ServerSetTargeting::bNewTargeting' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.GetAimOffsets
// 0x000C (0x000C - 0x0000)
struct ShooterCharacter_GetAimOffsets final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_GetAimOffsets) == 0x000004, "Wrong alignment on ShooterCharacter_GetAimOffsets");
static_assert(sizeof(ShooterCharacter_GetAimOffsets) == 0x00000C, "Wrong size on ShooterCharacter_GetAimOffsets");
static_assert(offsetof(ShooterCharacter_GetAimOffsets, ReturnValue) == 0x000000, "Member 'ShooterCharacter_GetAimOffsets::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.GetRunningSpeedModifier
// 0x0004 (0x0004 - 0x0000)
struct ShooterCharacter_GetRunningSpeedModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_GetRunningSpeedModifier) == 0x000004, "Wrong alignment on ShooterCharacter_GetRunningSpeedModifier");
static_assert(sizeof(ShooterCharacter_GetRunningSpeedModifier) == 0x000004, "Wrong size on ShooterCharacter_GetRunningSpeedModifier");
static_assert(offsetof(ShooterCharacter_GetRunningSpeedModifier, ReturnValue) == 0x000000, "Member 'ShooterCharacter_GetRunningSpeedModifier::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.GetTargetingSpeedModifier
// 0x0004 (0x0004 - 0x0000)
struct ShooterCharacter_GetTargetingSpeedModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_GetTargetingSpeedModifier) == 0x000004, "Wrong alignment on ShooterCharacter_GetTargetingSpeedModifier");
static_assert(sizeof(ShooterCharacter_GetTargetingSpeedModifier) == 0x000004, "Wrong size on ShooterCharacter_GetTargetingSpeedModifier");
static_assert(offsetof(ShooterCharacter_GetTargetingSpeedModifier, ReturnValue) == 0x000000, "Member 'ShooterCharacter_GetTargetingSpeedModifier::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct ShooterCharacter_GetWeapon final
{
public:
	class AShooterWeapon*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_GetWeapon) == 0x000008, "Wrong alignment on ShooterCharacter_GetWeapon");
static_assert(sizeof(ShooterCharacter_GetWeapon) == 0x000008, "Wrong size on ShooterCharacter_GetWeapon");
static_assert(offsetof(ShooterCharacter_GetWeapon, ReturnValue) == 0x000000, "Member 'ShooterCharacter_GetWeapon::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct ShooterCharacter_IsFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_IsFiring) == 0x000001, "Wrong alignment on ShooterCharacter_IsFiring");
static_assert(sizeof(ShooterCharacter_IsFiring) == 0x000001, "Wrong size on ShooterCharacter_IsFiring");
static_assert(offsetof(ShooterCharacter_IsFiring, ReturnValue) == 0x000000, "Member 'ShooterCharacter_IsFiring::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.IsFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct ShooterCharacter_IsFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_IsFirstPerson) == 0x000001, "Wrong alignment on ShooterCharacter_IsFirstPerson");
static_assert(sizeof(ShooterCharacter_IsFirstPerson) == 0x000001, "Wrong size on ShooterCharacter_IsFirstPerson");
static_assert(offsetof(ShooterCharacter_IsFirstPerson, ReturnValue) == 0x000000, "Member 'ShooterCharacter_IsFirstPerson::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct ShooterCharacter_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_IsRunning) == 0x000001, "Wrong alignment on ShooterCharacter_IsRunning");
static_assert(sizeof(ShooterCharacter_IsRunning) == 0x000001, "Wrong size on ShooterCharacter_IsRunning");
static_assert(offsetof(ShooterCharacter_IsRunning, ReturnValue) == 0x000000, "Member 'ShooterCharacter_IsRunning::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterCharacter.IsTargeting
// 0x0001 (0x0001 - 0x0000)
struct ShooterCharacter_IsTargeting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCharacter_IsTargeting) == 0x000001, "Wrong alignment on ShooterCharacter_IsTargeting");
static_assert(sizeof(ShooterCharacter_IsTargeting) == 0x000001, "Wrong size on ShooterCharacter_IsTargeting");
static_assert(offsetof(ShooterCharacter_IsTargeting, ReturnValue) == 0x000000, "Member 'ShooterCharacter_IsTargeting::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterWeapon.GetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct ShooterWeapon_GetPawnOwner final
{
public:
	class AShooterCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterWeapon_GetPawnOwner) == 0x000008, "Wrong alignment on ShooterWeapon_GetPawnOwner");
static_assert(sizeof(ShooterWeapon_GetPawnOwner) == 0x000008, "Wrong size on ShooterWeapon_GetPawnOwner");
static_assert(offsetof(ShooterWeapon_GetPawnOwner, ReturnValue) == 0x000000, "Member 'ShooterWeapon_GetPawnOwner::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterWeapon_Instant.ServerNotifyHit
// 0x009C (0x009C - 0x0000)
struct ShooterWeapon_Instant_ServerNotifyHit final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x0088(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReticleSpread;                                     // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterWeapon_Instant_ServerNotifyHit) == 0x000004, "Wrong alignment on ShooterWeapon_Instant_ServerNotifyHit");
static_assert(sizeof(ShooterWeapon_Instant_ServerNotifyHit) == 0x00009C, "Wrong size on ShooterWeapon_Instant_ServerNotifyHit");
static_assert(offsetof(ShooterWeapon_Instant_ServerNotifyHit, Impact) == 0x000000, "Member 'ShooterWeapon_Instant_ServerNotifyHit::Impact' has a wrong offset!");
static_assert(offsetof(ShooterWeapon_Instant_ServerNotifyHit, ShootDir) == 0x000088, "Member 'ShooterWeapon_Instant_ServerNotifyHit::ShootDir' has a wrong offset!");
static_assert(offsetof(ShooterWeapon_Instant_ServerNotifyHit, RandomSeed) == 0x000094, "Member 'ShooterWeapon_Instant_ServerNotifyHit::RandomSeed' has a wrong offset!");
static_assert(offsetof(ShooterWeapon_Instant_ServerNotifyHit, ReticleSpread) == 0x000098, "Member 'ShooterWeapon_Instant_ServerNotifyHit::ReticleSpread' has a wrong offset!");

// Function ShooterGame.ShooterWeapon_Instant.ServerNotifyMiss
// 0x0014 (0x0014 - 0x0000)
struct ShooterWeapon_Instant_ServerNotifyMiss final
{
public:
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReticleSpread;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterWeapon_Instant_ServerNotifyMiss) == 0x000004, "Wrong alignment on ShooterWeapon_Instant_ServerNotifyMiss");
static_assert(sizeof(ShooterWeapon_Instant_ServerNotifyMiss) == 0x000014, "Wrong size on ShooterWeapon_Instant_ServerNotifyMiss");
static_assert(offsetof(ShooterWeapon_Instant_ServerNotifyMiss, ShootDir) == 0x000000, "Member 'ShooterWeapon_Instant_ServerNotifyMiss::ShootDir' has a wrong offset!");
static_assert(offsetof(ShooterWeapon_Instant_ServerNotifyMiss, RandomSeed) == 0x00000C, "Member 'ShooterWeapon_Instant_ServerNotifyMiss::RandomSeed' has a wrong offset!");
static_assert(offsetof(ShooterWeapon_Instant_ServerNotifyMiss, ReticleSpread) == 0x000010, "Member 'ShooterWeapon_Instant_ServerNotifyMiss::ReticleSpread' has a wrong offset!");

// Function ShooterGame.ShooterAIController.FindClosestEnemyWithLOS
// 0x0010 (0x0010 - 0x0000)
struct ShooterAIController_FindClosestEnemyWithLOS final
{
public:
	class AShooterCharacter*                      ExcludeEnemy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_157B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShooterAIController_FindClosestEnemyWithLOS) == 0x000008, "Wrong alignment on ShooterAIController_FindClosestEnemyWithLOS");
static_assert(sizeof(ShooterAIController_FindClosestEnemyWithLOS) == 0x000010, "Wrong size on ShooterAIController_FindClosestEnemyWithLOS");
static_assert(offsetof(ShooterAIController_FindClosestEnemyWithLOS, ExcludeEnemy) == 0x000000, "Member 'ShooterAIController_FindClosestEnemyWithLOS::ExcludeEnemy' has a wrong offset!");
static_assert(offsetof(ShooterAIController_FindClosestEnemyWithLOS, ReturnValue) == 0x000008, "Member 'ShooterAIController_FindClosestEnemyWithLOS::ReturnValue' has a wrong offset!");

// Function ShooterGame.ShooterPlayerController.ClientSendRoundEndEvent
// 0x0008 (0x0008 - 0x0000)
struct ShooterPlayerController_ClientSendRoundEndEvent final
{
public:
	bool                                          bIsWinner;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_157F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpendedTimeInSeconds;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerController_ClientSendRoundEndEvent) == 0x000004, "Wrong alignment on ShooterPlayerController_ClientSendRoundEndEvent");
static_assert(sizeof(ShooterPlayerController_ClientSendRoundEndEvent) == 0x000008, "Wrong size on ShooterPlayerController_ClientSendRoundEndEvent");
static_assert(offsetof(ShooterPlayerController_ClientSendRoundEndEvent, bIsWinner) == 0x000000, "Member 'ShooterPlayerController_ClientSendRoundEndEvent::bIsWinner' has a wrong offset!");
static_assert(offsetof(ShooterPlayerController_ClientSendRoundEndEvent, ExpendedTimeInSeconds) == 0x000004, "Member 'ShooterPlayerController_ClientSendRoundEndEvent::ExpendedTimeInSeconds' has a wrong offset!");

// Function ShooterGame.ShooterPlayerController.ClientSetSpectatorCamera
// 0x0018 (0x0018 - 0x0000)
struct ShooterPlayerController_ClientSetSpectatorCamera final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerController_ClientSetSpectatorCamera) == 0x000004, "Wrong alignment on ShooterPlayerController_ClientSetSpectatorCamera");
static_assert(sizeof(ShooterPlayerController_ClientSetSpectatorCamera) == 0x000018, "Wrong size on ShooterPlayerController_ClientSetSpectatorCamera");
static_assert(offsetof(ShooterPlayerController_ClientSetSpectatorCamera, CameraLocation) == 0x000000, "Member 'ShooterPlayerController_ClientSetSpectatorCamera::CameraLocation' has a wrong offset!");
static_assert(offsetof(ShooterPlayerController_ClientSetSpectatorCamera, CameraRotation) == 0x00000C, "Member 'ShooterPlayerController_ClientSetSpectatorCamera::CameraRotation' has a wrong offset!");

// Function ShooterGame.ShooterPlayerController.OnLeaderboardReadComplete
// 0x0001 (0x0001 - 0x0000)
struct ShooterPlayerController_OnLeaderboardReadComplete final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerController_OnLeaderboardReadComplete) == 0x000001, "Wrong alignment on ShooterPlayerController_OnLeaderboardReadComplete");
static_assert(sizeof(ShooterPlayerController_OnLeaderboardReadComplete) == 0x000001, "Wrong size on ShooterPlayerController_OnLeaderboardReadComplete");
static_assert(offsetof(ShooterPlayerController_OnLeaderboardReadComplete, bWasSuccessful) == 0x000000, "Member 'ShooterPlayerController_OnLeaderboardReadComplete::bWasSuccessful' has a wrong offset!");

// Function ShooterGame.ShooterPlayerController.Say
// 0x0010 (0x0010 - 0x0000)
struct ShooterPlayerController_Say final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerController_Say) == 0x000008, "Wrong alignment on ShooterPlayerController_Say");
static_assert(sizeof(ShooterPlayerController_Say) == 0x000010, "Wrong size on ShooterPlayerController_Say");
static_assert(offsetof(ShooterPlayerController_Say, Msg) == 0x000000, "Member 'ShooterPlayerController_Say::Msg' has a wrong offset!");

// Function ShooterGame.ShooterPlayerController.ServerCheat
// 0x0010 (0x0010 - 0x0000)
struct ShooterPlayerController_ServerCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerController_ServerCheat) == 0x000008, "Wrong alignment on ShooterPlayerController_ServerCheat");
static_assert(sizeof(ShooterPlayerController_ServerCheat) == 0x000010, "Wrong size on ShooterPlayerController_ServerCheat");
static_assert(offsetof(ShooterPlayerController_ServerCheat, Msg) == 0x000000, "Member 'ShooterPlayerController_ServerCheat::Msg' has a wrong offset!");

// Function ShooterGame.ShooterPlayerController.ServerSay
// 0x0010 (0x0010 - 0x0000)
struct ShooterPlayerController_ServerSay final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerController_ServerSay) == 0x000008, "Wrong alignment on ShooterPlayerController_ServerSay");
static_assert(sizeof(ShooterPlayerController_ServerSay) == 0x000010, "Wrong size on ShooterPlayerController_ServerSay");
static_assert(offsetof(ShooterPlayerController_ServerSay, Msg) == 0x000000, "Member 'ShooterPlayerController_ServerSay::Msg' has a wrong offset!");

// Function ShooterGame.ShooterPlayerController.SetGodMode
// 0x0001 (0x0001 - 0x0000)
struct ShooterPlayerController_SetGodMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerController_SetGodMode) == 0x000001, "Wrong alignment on ShooterPlayerController_SetGodMode");
static_assert(sizeof(ShooterPlayerController_SetGodMode) == 0x000001, "Wrong size on ShooterPlayerController_SetGodMode");
static_assert(offsetof(ShooterPlayerController_SetGodMode, bEnable) == 0x000000, "Member 'ShooterPlayerController_SetGodMode::bEnable' has a wrong offset!");

// Function ShooterGame.ShooterPlayerController.SimulateInputKey
// 0x0020 (0x0020 - 0x0000)
struct ShooterPlayerController_SimulateInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressed;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1580[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShooterPlayerController_SimulateInputKey) == 0x000008, "Wrong alignment on ShooterPlayerController_SimulateInputKey");
static_assert(sizeof(ShooterPlayerController_SimulateInputKey) == 0x000020, "Wrong size on ShooterPlayerController_SimulateInputKey");
static_assert(offsetof(ShooterPlayerController_SimulateInputKey, Key) == 0x000000, "Member 'ShooterPlayerController_SimulateInputKey::Key' has a wrong offset!");
static_assert(offsetof(ShooterPlayerController_SimulateInputKey, bPressed) == 0x000018, "Member 'ShooterPlayerController_SimulateInputKey::bPressed' has a wrong offset!");

// Function ShooterGame.ShooterCheatManager.ChangeTeam
// 0x0004 (0x0004 - 0x0000)
struct ShooterCheatManager_ChangeTeam final
{
public:
	int32                                         NewTeamNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCheatManager_ChangeTeam) == 0x000004, "Wrong alignment on ShooterCheatManager_ChangeTeam");
static_assert(sizeof(ShooterCheatManager_ChangeTeam) == 0x000004, "Wrong size on ShooterCheatManager_ChangeTeam");
static_assert(offsetof(ShooterCheatManager_ChangeTeam, NewTeamNumber) == 0x000000, "Member 'ShooterCheatManager_ChangeTeam::NewTeamNumber' has a wrong offset!");

// Function ShooterGame.ShooterCheatManager.Cheat
// 0x0010 (0x0010 - 0x0000)
struct ShooterCheatManager_Cheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterCheatManager_Cheat) == 0x000008, "Wrong alignment on ShooterCheatManager_Cheat");
static_assert(sizeof(ShooterCheatManager_Cheat) == 0x000010, "Wrong size on ShooterCheatManager_Cheat");
static_assert(offsetof(ShooterCheatManager_Cheat, Msg) == 0x000000, "Member 'ShooterCheatManager_Cheat::Msg' has a wrong offset!");

// Function ShooterGame.ShooterGameMode.SetAllowBots
// 0x0008 (0x0008 - 0x0000)
struct ShooterGameMode_SetAllowBots final
{
public:
	bool                                          bInAllowBots;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1586[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InMaxBots;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterGameMode_SetAllowBots) == 0x000004, "Wrong alignment on ShooterGameMode_SetAllowBots");
static_assert(sizeof(ShooterGameMode_SetAllowBots) == 0x000008, "Wrong size on ShooterGameMode_SetAllowBots");
static_assert(offsetof(ShooterGameMode_SetAllowBots, bInAllowBots) == 0x000000, "Member 'ShooterGameMode_SetAllowBots::bInAllowBots' has a wrong offset!");
static_assert(offsetof(ShooterGameMode_SetAllowBots, InMaxBots) == 0x000004, "Member 'ShooterGameMode_SetAllowBots::InMaxBots' has a wrong offset!");

// Function ShooterGame.ShooterPlayerState.BroadcastDeath
// 0x0018 (0x0018 - 0x0000)
struct ShooterPlayerState_BroadcastDeath final
{
public:
	class AShooterPlayerState*                    KillerPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      KillerDamageType;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AShooterPlayerState*                    KilledPlayerState;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerState_BroadcastDeath) == 0x000008, "Wrong alignment on ShooterPlayerState_BroadcastDeath");
static_assert(sizeof(ShooterPlayerState_BroadcastDeath) == 0x000018, "Wrong size on ShooterPlayerState_BroadcastDeath");
static_assert(offsetof(ShooterPlayerState_BroadcastDeath, KillerPlayerState) == 0x000000, "Member 'ShooterPlayerState_BroadcastDeath::KillerPlayerState' has a wrong offset!");
static_assert(offsetof(ShooterPlayerState_BroadcastDeath, KillerDamageType) == 0x000008, "Member 'ShooterPlayerState_BroadcastDeath::KillerDamageType' has a wrong offset!");
static_assert(offsetof(ShooterPlayerState_BroadcastDeath, KilledPlayerState) == 0x000010, "Member 'ShooterPlayerState_BroadcastDeath::KilledPlayerState' has a wrong offset!");

// Function ShooterGame.ShooterPlayerState.InformAboutKill
// 0x0018 (0x0018 - 0x0000)
struct ShooterPlayerState_InformAboutKill final
{
public:
	class AShooterPlayerState*                    KillerPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      KillerDamageType;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AShooterPlayerState*                    KilledPlayerState;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterPlayerState_InformAboutKill) == 0x000008, "Wrong alignment on ShooterPlayerState_InformAboutKill");
static_assert(sizeof(ShooterPlayerState_InformAboutKill) == 0x000018, "Wrong size on ShooterPlayerState_InformAboutKill");
static_assert(offsetof(ShooterPlayerState_InformAboutKill, KillerPlayerState) == 0x000000, "Member 'ShooterPlayerState_InformAboutKill::KillerPlayerState' has a wrong offset!");
static_assert(offsetof(ShooterPlayerState_InformAboutKill, KillerDamageType) == 0x000008, "Member 'ShooterPlayerState_InformAboutKill::KillerDamageType' has a wrong offset!");
static_assert(offsetof(ShooterPlayerState_InformAboutKill, KilledPlayerState) == 0x000010, "Member 'ShooterPlayerState_InformAboutKill::KilledPlayerState' has a wrong offset!");

// Function ShooterGame.ShooterProjectile.OnImpact
// 0x0088 (0x0088 - 0x0000)
struct ShooterProjectile_OnImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterProjectile_OnImpact) == 0x000004, "Wrong alignment on ShooterProjectile_OnImpact");
static_assert(sizeof(ShooterProjectile_OnImpact) == 0x000088, "Wrong size on ShooterProjectile_OnImpact");
static_assert(offsetof(ShooterProjectile_OnImpact, HitResult) == 0x000000, "Member 'ShooterProjectile_OnImpact::HitResult' has a wrong offset!");

// Function ShooterGame.ShooterWeapon_Projectile.ServerFireProjectile
// 0x0018 (0x0018 - 0x0000)
struct ShooterWeapon_Projectile_ServerFireProjectile final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x000C(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShooterWeapon_Projectile_ServerFireProjectile) == 0x000004, "Wrong alignment on ShooterWeapon_Projectile_ServerFireProjectile");
static_assert(sizeof(ShooterWeapon_Projectile_ServerFireProjectile) == 0x000018, "Wrong size on ShooterWeapon_Projectile_ServerFireProjectile");
static_assert(offsetof(ShooterWeapon_Projectile_ServerFireProjectile, Origin) == 0x000000, "Member 'ShooterWeapon_Projectile_ServerFireProjectile::Origin' has a wrong offset!");
static_assert(offsetof(ShooterWeapon_Projectile_ServerFireProjectile, ShootDir) == 0x00000C, "Member 'ShooterWeapon_Projectile_ServerFireProjectile::ShootDir' has a wrong offset!");

}

